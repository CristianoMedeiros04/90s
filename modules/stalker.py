"""
P√°gina Temas Quentes - An√°lise REAL de conte√∫do web
Agora com web crawler completo e transcri√ß√£o de v√≠deos
"""
import streamlit as st
from services.web_crawler import crawl_multiple_sites, extract_single_page_deep
from services.ai_agents_real import analisar_conteudo_com_ia, gerar_relatorio_consolidado
from modules.cerebro import get_cerebro_context
from datetime import datetime
import base64
import json


def render_stalker_page():
    """Renderiza a p√°gina Stalker (antiga Temas Quentes)"""
    
    ## === T√çTULO PRINCIPAL === ##
    with open("icons/incognito.svg", "rb") as f:
        svg_base64 = base64.b64encode(f.read()).decode()
    
    st.markdown(f""" 
        <div style="display: flex; align-items: center; gap: 18px; margin-bottom: 1.5rem;">
            <img src="data:image/svg+xml;base64,{svg_base64}" width="48" height="48" style="margin-top: 4px;" />
            <h2 style="margin: 0; font-size: 2.8rem; font-weight: 700;">Stalker</h2>
        </div>
    """, unsafe_allow_html=True)   
    

    # Configura√ß√£o da an√°lise
    st.subheader("üîó Links para An√°lise")
    
    # Campos para URLs
    urls = []
    for i in range(5):
        url = st.text_input(
            f"Link {i+1}:",
            placeholder="https://exemplo.com/artigo",
            key=f"url_{i}",
            help=f"Cole aqui o {i+1}¬∫ link para an√°lise"
        )
        if url.strip():
            urls.append(url.strip())
    
    if not urls:
        st.info("üëÜ Cole pelo menos 1 link para come√ßar a an√°lise")
        return
    
    # Modo de an√°lise
    st.subheader("‚öôÔ∏è Configura√ß√£o da An√°lise")
    
    col1, col2 = st.columns(2)
    
    with col1:
        modo_analise = st.radio(
            "Modo de an√°lise:",
            ["An√°lise R√°pida", "An√°lise Completa"],
            help="R√°pida: apenas a p√°gina. Completa: vasculha o site inteiro"
        )
    
    with col2:
        if modo_analise == "An√°lise R√°pida":
            st.info("""
            **An√°lise R√°pida:**
            - Extrai conte√∫do da p√°gina espec√≠fica
            - Transcreve v√≠deos encontrados
            - An√°lise com IA personalizada
            - ‚è±Ô∏è Mais r√°pido
            """)
        else:
            st.info("""
            **An√°lise Completa:**
            - Vasculha at√© 5 p√°ginas por site
            - Mapeia links internos
            - Transcreve m√∫ltiplos v√≠deos
            - Relat√≥rio abrangente
            - ‚è±Ô∏è Mais demorado, mais completo
            """)
    
    # Verificar contexto do C√©rebro
    cerebro_context = get_cerebro_context()
    if "Perfil n√£o configurado" in cerebro_context:
        st.markdown ("‚ö†Ô∏è Configure seu perfil na tela **C√©rebro** para obter an√°lises mais personalizadas!")
    else:
        st.markdown ("‚úÖ An√°lise ser√° personalizada com base no seu perfil do C√©rebro")
    
    # Bot√£o para iniciar an√°lise
    if st.button("üöÄ Iniciar An√°lise de Temas Quentes", type="primary"):
        
        st.markdown("---")
        st.subheader("üîÑ Processamento em Andamento")
        
        try:
            if modo_analise == "An√°lise R√°pida":
                # An√°lise r√°pida - uma p√°gina por vez
                all_analyses = []
                
                for i, url in enumerate(urls):
                    st.markdown(f"### üìÑ Analisando Link {i+1}: {url}")
                    
                    # Extrair conte√∫do
                    report = extract_single_page_deep(url)
                    
                    if report.get('statistics', {}).get('successful_pages', 0) > 0:
                        # Analisar com IA
                        st.markdown ("Analisando conte√∫do...")
                        analysis = analisar_conteudo_com_ia(
                            conteudo=report['all_content'] + report.get('video_content', ''),
                            url=url
                        )
                        
                        if analysis:
                            all_analyses.append(analysis)
                            st.success(f"‚úÖ Link {i+1} analisado com sucesso!")
                            
                            # Mostrar pr√©via da an√°lise
                            with st.expander(f"üóé Pr√©via da An√°lise - Link {i+1}"):
                                st.markdown(analysis[:500] + "...")
                        else:
                            st.error(f"‚ùå Erro na an√°lise do Link {i+1}")
                    else:
                        st.error(f"‚ùå Erro ao extrair conte√∫do do Link {i+1}")
                
            else:
                # An√°lise completa - crawler completo
                st.markdown ("üï∑Ô∏è Iniciando Pesquisa completa...")
                
                report = crawl_multiple_sites(urls, max_pages_per_site=5)
                
                if report['statistics']['successful_pages'] > 0:
                    # Analisar conte√∫do consolidado
                    st.info("‚óâ Analisando todo o conte√∫do coletado com IA...")
                    
                    full_content = report['all_content'] + report.get('video_content', '')
                    analysis = analisar_conteudo_com_ia(
                        conteudo=full_content,
                        url="M√∫ltiplos sites analisados"
                    )
                    
                    if analysis:
                        all_analyses = [analysis]
                        st.success("‚úÖ An√°lise completa conclu√≠da!")
                    else:
                        st.error("‚ùå Erro na an√°lise com IA")
                        return
                else:
                    st.error("‚ùå Nenhum conte√∫do foi extra√≠do com sucesso")
                    return
            
            # Gerar relat√≥rio consolidado
            if all_analyses:
                st.markdown("‚óâ Gerando relat√≥rio consolidado...")
                
                relatorio_final = gerar_relatorio_consolidado(all_analyses)
                
                if relatorio_final:
                    # Exibir resultado final
                    display_analysis_results(relatorio_final, urls, modo_analise, report if modo_analise == "An√°lise Completa" else None)
                else:
                    st.error("‚ùå Erro ao gerar relat√≥rio consolidado")
            else:
                st.error("‚ùå Nenhuma an√°lise foi conclu√≠da com sucesso")
                
        except Exception as e:
            st.error(f"‚ùå Erro inesperado durante a an√°lise: {str(e)}")


def display_analysis_results(relatorio, urls, modo_analise, crawler_report=None):
    """Exibe os resultados da an√°lise"""
    
    st.markdown("---")
    st.subheader("üìä Relat√≥rio de Temas Quentes")
    
    # Informa√ß√µes da an√°lise
    st.markdown("‚ÑπÔ∏è **Informa√ß√µes da An√°lise**")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.write(f"**üîó Links analisados:** {len(urls)}")
    
    with col2:
        st.write(f"**‚öôÔ∏è Modo:** {modo_analise}")
    
    with col3:
        st.write(f"**üìÖ Data:** {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    
    # Estat√≠sticas do crawler (se an√°lise completa)
    if crawler_report and modo_analise == "An√°lise Completa":
        st.markdown("üìà **Estat√≠sticas do Crawling**")
        
        stats = crawler_report['statistics']
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("P√°ginas Processadas", stats['successful_pages'])
        
        with col2:
            st.metric("Total de Palavras", f"{stats['total_words']:,}")
        
        with col3:
            st.metric("V√≠deos Encontrados", stats['total_videos'])
        
        with col4:
            st.metric("V√≠deos Transcritos", stats['transcribed_videos'])
    
    # Relat√≥rio principal
    st.markdown("---")
    st.subheader("üóé Relat√≥rio Consolidado")
    
    # Campo edit√°vel para o relat√≥rio
    relatorio_editado = st.text_area(
        "Relat√≥rio (edit√°vel):",
        value=relatorio,
        height=600,
        key="relatorio_temas_quentes"
    )
    
    # Links analisados
    st.markdown("---")
    st.subheader("üîó Links Analisados")
    
    for i, url in enumerate(urls):
        st.write(f"{i+1}. {url}")
    
    # P√°ginas mais relevantes (se an√°lise completa)
    if crawler_report and crawler_report.get('top_pages'):
        st.markdown("---")
        st.subheader("‚≠ê P√°ginas Mais Relevantes")
        
        for i, page in enumerate(crawler_report['top_pages'][:3]):
            with st.expander(f"üìÑ {i+1}. {page['title']} ({page['word_count']} palavras)"):
                st.write(f"**URL:** {page['url']}")
                st.write(f"**Conte√∫do:** {page['content'][:300]}...")
    
    # V√≠deos transcritos (se houver)
    if crawler_report and crawler_report.get('video_transcriptions'):
        st.markdown("---")
        st.subheader("üé• V√≠deos Transcritos")
        
        for i, video in enumerate(crawler_report['video_transcriptions']):
            with st.expander(f"üìπ {i+1}. {video['video_title']} ({video['word_count']} palavras)"):
                st.write(f"**URL do v√≠deo:** {video['video_url']}")
                st.write(f"**P√°gina origem:** {video['page_title']}")
                st.text_area(
                    "Transcri√ß√£o:",
                    value=video['transcription'][:500] + "...",
                    height=100,
                    disabled=True,
                    key=f"transcricao_{i}"
                )
    
    # Bot√µes de a√ß√£o
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.download_button(
            "‚¨áÔ∏è Baixar Relat√≥rio",
            data=relatorio_editado,
            file_name=f"temas_quentes_{datetime.now().strftime('%Y%m%d_%H%M')}.txt",
            mime="text/plain"
        )
    
    with col2:
        if st.button("üóé Copiar Relat√≥rio"):
            st.code(relatorio_editado, language="text")
            st.info("üóé Relat√≥rio exibido acima para c√≥pia manual.")
    
    with col3:
        if st.button("‚Üª Nova An√°lise"):
            st.rerun()
    
    # Dicas para usar os insights
    st.markdown("---")
    st.subheader("üí° Como Usar os Insights")
    
    st.markdown("""
    **‚óâ Para Cria√ß√£o de Conte√∫do:**
    - Use as tend√™ncias identificadas para criar posts relevantes
    - Adapte os insights para seu p√∫blico-alvo
    - Crie reacts sobre os v√≠deos transcritos
    
    **‚óâ Para Estrat√©gia:**
    - Monitore concorrentes e influenciadores
    - Identifique gaps de conte√∫do no mercado
    - Planeje campanhas baseadas em dados reais
    
    **‚óâ Para Engajamento:**
    - Use os temas quentes em suas postagens
    - Participe de conversas relevantes
    - Crie conte√∫do oportuno e atual
    """)


# Fun√ß√£o principal para compatibilidade
def show_temas_quentes_page():
    """Fun√ß√£o principal da p√°gina Temas Quentes"""
    render_temas_quentes_page()

