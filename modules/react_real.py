"""
P√°gina React - Gera√ß√£o de roteiros baseados em v√≠deos REAIS
Agora com processamento real usando yt-dlp e Whisper
"""
import streamlit as st
import os
import base64
import json
from datetime import datetime
import yt_dlp
import whisper


def get_cerebro_context():
    """Retorna o contexto do c√©rebro formatado para uso em prompts de IA"""
    cerebro_file = "data/cerebro.json"
    if os.path.exists(cerebro_file):
        with open(cerebro_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
    else:
        data = {}
    
    if not data:
        return "Perfil n√£o configurado. Use informa√ß√µes gen√©ricas."
    
    context = f"""
CONTEXTO DO USU√ÅRIO (C√âREBRO):

=== INFORMA√á√ïES PESSOAIS ===
Nome: {data.get('nome', 'N√£o informado')}
Profiss√£o: {data.get('profissao', 'N√£o informado')}

=== NEG√ìCIO/PROJETO ===
√Årea de Atua√ß√£o: {data.get('area_atuacao', 'N√£o informado')}
P√∫blico-Alvo: {data.get('publico_alvo', 'N√£o informado')}

=== OBJETIVOS E METAS ===
Objetivos Principais: {data.get('objetivos', 'N√£o informado')}

=== CONTE√öDO E COMUNICA√á√ÉO ===
Tom de Voz: {data.get('tom_voz', 'N√£o informado')}
Temas de Interesse: {data.get('temas_interesse', 'N√£o informado')}
"""
    return context


def extract_video_metadata(url):
    """Extrai metadados reais do v√≠deo usando yt-dlp"""
    try:
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'extract_flat': False,
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            
            duration = info.get('duration', 0)
            duration_formatted = f"{duration // 60}:{duration % 60:02d}" if duration else "N/A"
            
            return {
                'platform': 'YouTube',
                'title': info.get('title', 'T√≠tulo n√£o dispon√≠vel'),
                'duration': duration_formatted,
                'duration_seconds': duration,
                'author': info.get('uploader', 'Autor n√£o dispon√≠vel'),
                'description': info.get('description', ''),
                'view_count': info.get('view_count', 0),
                'url': url
            }
            
    except Exception as e:
        st.error(f"‚ùå Erro ao extrair metadados: {str(e)}")
        return None


def download_and_transcribe_video(url):
    """Baixa √°udio e transcreve usando Whisper"""
    try:
        import tempfile
        import os
        
        # Criar diret√≥rio tempor√°rio
        temp_dir = tempfile.mkdtemp()
        audio_path = os.path.join(temp_dir, "audio.wav")
        
        # Configurar yt-dlp para baixar √°udio
        ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': audio_path.replace('.wav', '.%(ext)s'),
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'wav',
                'preferredquality': '192',
            }],
            'quiet': True,
            'no_warnings': True,
        }
        
        # Baixar √°udio
        st.info("üéµ Baixando √°udio do v√≠deo...")
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        
        # Encontrar arquivo de √°udio baixado
        audio_file = None
        for file in os.listdir(temp_dir):
            if file.endswith('.wav'):
                audio_file = os.path.join(temp_dir, file)
                break
        
        if not audio_file:
            st.error("‚ùå N√£o foi poss√≠vel baixar o √°udio")
            return None
        
        # Carregar modelo Whisper
        st.info("üéØ Carregando modelo Whisper...")
        model = whisper.load_model("base")
        
        # Transcrever √°udio
        st.info("üìù Transcrevendo √°udio...")
        result = model.transcribe(audio_file)
        
        # Limpar arquivos tempor√°rios
        try:
            import shutil
            shutil.rmtree(temp_dir)
        except:
            pass
        
        return result["text"].strip()
        
    except Exception as e:
        st.error(f"‚ùå Erro na transcri√ß√£o: {str(e)}")
        return None


def generate_react_script_with_ai(video_data, transcription, description, style):
    """Gera roteiro React usando Claude"""
    import anthropic
    
    api_key = os.getenv("ANTHROPIC_API_KEY")
    if not api_key:
        st.error("‚ùå Chave da API Anthropic n√£o configurada!")
        return None
    
    try:
        client = anthropic.Anthropic(api_key=api_key)
        
        # Selecionar segmento engajante (primeiras 100 palavras)
        words = transcription.split()
        segment = " ".join(words[:100]) if len(words) > 100 else transcription
        
        # Obter contexto do c√©rebro
        cerebro_context = get_cerebro_context()
        
        if style == "React Padr√£o":
            prompt = f"""
{cerebro_context}

V√çDEO PROCESSADO:
- T√≠tulo: {video_data['title']}
- Autor: {video_data['author']}
- Dura√ß√£o: {video_data['duration']}
- Plataforma: {video_data['platform']}

TRANSCRI√á√ÉO COMPLETA:
{transcription}

SEGMENTO SELECIONADO PARA REACT:
{segment}

INSTRU√á√ïES DO USU√ÅRIO: {description}

TAREFA: Criar roteiro React Padr√£o personalizado

ESTRUTURA OBRIGAT√ìRIA:
1. TRECHO DO V√çDEO (30-50s) - Use o segmento selecionado
2. HEADLINE (3-10s) - Crie headline impactante baseada no conte√∫do
3. CONTE√öDO PRINCIPAL (15-30s) - Sua rea√ß√£o/an√°lise personalizada
4. POSICIONAMENTO + CTA (10-20s) - Use informa√ß√µes do seu perfil

DIRETRIZES:
- Use seu tom de voz e estilo de comunica√ß√£o
- Conecte com seu p√∫blico-alvo
- Inclua seus diferenciais e experi√™ncias
- Mantenha autenticidade e relev√¢ncia
- Dura√ß√£o total: 60-90 segundos

Gere o roteiro completo:
"""
        else:  # React Bate-Bola
            prompt = f"""
{cerebro_context}

V√çDEO PROCESSADO:
- T√≠tulo: {video_data['title']}
- Autor: {video_data['author']}
- Dura√ß√£o: {video_data['duration']}
- Plataforma: {video_data['platform']}

TRANSCRI√á√ÉO COMPLETA:
{transcription}

SEGMENTO SELECIONADO PARA REACT:
{segment}

INSTRU√á√ïES DO USU√ÅRIO: {description}

TAREFA: Criar roteiro React Bate-Bola personalizado

ESTRUTURA OBRIGAT√ìRIA:
1. HEADLINE (3-5s) - Headline chamativa
2. BATE-BOLA (60-70s):
   - Trecho do v√≠deo
   - SUA REA√á√ÉO imediata
   - Trecho do v√≠deo
   - SUA REA√á√ÉO
   - Continue alternando
3. POSICIONAMENTO + CTA (10-15s)

DIRETRIZES:
- Rea√ß√µes aut√™nticas e espont√¢neas
- Use seu tom de voz natural
- Conecte com experi√™ncias pessoais
- Mantenha energia alta
- Dura√ß√£o total: 75-90 segundos

Gere o roteiro completo:
"""
        
        response = client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=2000,
            messages=[{"role": "user", "content": prompt}]
        )
        
        return {
            'script': response.content[0].text,
            'video_data': video_data,
            'transcription': transcription,
            'segment_used': segment,
            'style': style
        }
        
    except Exception as e:
        st.error(f"‚ùå Erro ao gerar roteiro: {str(e)}")
        return None


def render_react_page():
    """Renderiza a p√°gina React com funcionalidade REAL"""
    
        ## === T√çTULO PRINCIPAL === ##
    with open("icons/theater-masks.svg", "rb") as f:
        svg_base64 = base64.b64encode(f.read()).decode()
    
    st.markdown(f""" 
        <div style="display: flex; align-items: center; gap: 18px; margin-bottom: 1.5rem;">
            <img src="data:image/svg+xml;base64,{svg_base64}" width="48" height="48" style="margin-top: 4px;" />
            <h2 style="margin: 0; font-size: 2.8rem; font-weight: 700;">React</h2>
        </div>
    """, unsafe_allow_html=True)    
 
    # Configura√ß√£o do React
    st.subheader("‚õ≠ Configura√ß√£o do React")
    
    # Campo para URL do v√≠deo
    video_url = st.text_input(
        "**üîó Link do v√≠deo:**",
        placeholder="https://www.youtube.com/watch?v=...",
        help="Cole aqui o link do YouTube"
    )
    
    # Campo para descri√ß√£o (opcional)
    description = st.text_area(
        "**üóé Descreva o v√≠deo e o tipo de abordagem desejada:**",
        placeholder="Ex: Quero criar um react sobre este v√≠deo, focando na minha experi√™ncia pessoal...",
        help="Opcional: Descreva como voc√™ quer abordar o conte√∫do"
    )    
    
    col1, col2 = st.columns(2)
    
    with col1:
        react_style = st.radio(
            "*‚óâ‚îÄ Escolha o estilo:*",
            ["React Padr√£o", "React Bate-Bola"],
            index=0,
            key="react_style"
        )
    
    with col2:
        if react_style == "React Padr√£o":
            st.info("""
            **React Padr√£o:**
            1. Trecho do v√≠deo (30-50s)
            2. Headline (3-10s)
            3. Conte√∫do principal (15-30s)
            4. Posicionamento + CTA
            """)
        else:
            st.info("""
            **React Bate-Bola:**
            1. Headline (3-5s)
            2. Bate-bola: Trecho + Rea√ß√£o
            3. Posicionamento + CTA
            """)
    
    # Bot√£o para gerar roteiro
    if st.button("Gerar Roteiro", type="primary"):
        if not video_url:
            st.error("‚ùå Por favor, insira o link do v√≠deo!")
            return
        
        # Verificar se o contexto do C√©rebro existe
        cerebro_context = get_cerebro_context()
        if "Perfil n√£o configurado" in cerebro_context:
            st.warning("‚ö†Ô∏è Configure seu perfil na tela **C√©rebro** para obter roteiros mais personalizados!")
        
        # Processar v√≠deo e gerar roteiro
        with st.spinner("üé• Processando v√≠deo real..."):
            try:
                # 1. Extrair metadados
                st.info("üìã Extraindo metadados do v√≠deo...")
                video_data = extract_video_metadata(video_url)
                
                if not video_data:
                    st.error("‚ùå Erro ao extrair metadados do v√≠deo")
                    return
                
                # Mostrar informa√ß√µes do v√≠deo
                st.success("‚úÖ Metadados extra√≠dos com sucesso!")
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.write(f"**üì± Plataforma:** {video_data['platform']}")
                    st.write(f"**‚è±Ô∏è Dura√ß√£o:** {video_data['duration']}")
                
                with col2:
                    st.write(f"**üìù T√≠tulo:** {video_data['title'][:50]}...")
                    st.write(f"**üë§ Autor:** {video_data['author']}")
                
                with col3:
                    st.write(f"**üëÄ Visualiza√ß√µes:** {video_data.get('view_count', 0):,}")
                
                # 2. Baixar e transcrever √°udio
                transcription = download_and_transcribe_video(video_url)
                
                if not transcription:
                    st.error("‚ùå Erro ao transcrever o v√≠deo")
                    return
                
                st.success(f"‚úÖ Transcri√ß√£o conclu√≠da! {len(transcription.split())} palavras extra√≠das")
                
                # Mostrar pr√©via da transcri√ß√£o
                with st.expander("üìú Pr√©via da transcri√ß√£o"):
                    st.text_area("Transcri√ß√£o completa:", value=transcription[:500] + "...", height=100, disabled=True)
                
                # 3. Gerar roteiro com IA
                st.info("ü§ñ Gerando roteiro personalizado com IA...")
                result = generate_react_script_with_ai(video_data, transcription, description, react_style)
                
                if result:
                    # Exibir resultado
                    display_react_result(result)
                else:
                    st.error("‚ùå Erro ao gerar roteiro com IA")
                    
            except Exception as e:
                st.error(f"‚ùå Erro inesperado: {str(e)}")


def display_react_result(result):
    """Exibe o resultado do processamento React"""
    
    st.success("‚úÖ Roteiro React gerado com sucesso!")
    
    # Informa√ß√µes do v√≠deo processado
    st.subheader("üé¨ Roteiro React Gerado")
    
    video_data = result['video_data']
    
    # Configura√ß√£o usada
    st.markdown("‚öôÔ∏è **Configura√ß√£o usada:**")
    col1, col2 = st.columns(2)
    
    with col1:
        st.write(f"**üé≠ Estilo:** {result['style']}")
    
    with col2:
        st.write(f"**üìä Palavras da transcri√ß√£o:** {len(result['transcription'].split())}")
    
    # Roteiro gerado
    st.markdown("---")
    st.subheader("üìù Roteiro Gerado")
    
    # Campo edit√°vel para o roteiro
    roteiro_editado = st.text_area(
        "Roteiro (edit√°vel):",
        value=result['script'],
        height=400,
        key="roteiro_react_editado"
    )
    
    # Estat√≠sticas do roteiro
    st.subheader("üìä Estat√≠sticas do Roteiro")
    
    col1, col2, col3, col4 = st.columns(4)
    
    palavras = len(roteiro_editado.split())
    caracteres = len(roteiro_editado)
    tempo_leitura = max(1, palavras // 150)
    duracao_estimada = max(10, int(palavras * 0.5))
    
    with col1:
        st.metric("Palavras", palavras)
    
    with col2:
        st.metric("Caracteres", caracteres)
    
    with col3:
        st.metric("Tempo de Leitura", f"{tempo_leitura} min")
    
    with col4:
        st.metric("Dura√ß√£o Estimada", f"{duracao_estimada}s")
    
    # Segmento do v√≠deo usado
    if result.get('segment_used'):
        st.subheader("üìÑ Segmento do v√≠deo usado")
        st.text_area(
            "Trecho selecionado da transcri√ß√£o:",
            value=result['segment_used'],
            height=100,
            disabled=True
        )
    
    # Transcri√ß√£o completa (expans√≠vel)
    with st.expander("üìú Transcri√ß√£o completa do v√≠deo"):
        st.text_area(
            "Transcri√ß√£o completa:",
            value=result['transcription'],
            height=200,
            disabled=True
        )
    
    # Bot√µes de a√ß√£o
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.download_button(
            "‚¨áÔ∏è Baixar Roteiro",
            data=roteiro_editado,
            file_name=f"react_{result['style'].lower().replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M')}.txt",
            mime="text/plain"
        )
    
    with col2:
        if st.button("üìã Copiar"):
            st.code(roteiro_editado, language="text")
            st.info("üìã Roteiro exibido acima para c√≥pia manual.")
    
    with col3:
        if st.button("üîÑ Novo React"):
            st.rerun()


# Fun√ß√£o principal para compatibilidade
def show_react_page():
    """Fun√ß√£o principal da p√°gina React"""
    render_react_page()

