"""
Servi√ßos de integra√ß√£o com IA - Claude 3.5 Sonnet
Agora com contexto do C√©rebro e processamento real de v√≠deos
"""
import os
import anthropic
import streamlit as st
from modules.cerebro import get_cerebro_context
from services.video_processing import process_video_url, select_engaging_segment


def get_anthropic_client():
    """Retorna cliente Anthropic configurado"""
    api_key = os.getenv("ANTHROPIC_API_KEY")
    if not api_key:
        st.error("‚ùå Chave da API Anthropic n√£o configurada!")
        return None
    
    return anthropic.Anthropic(api_key=api_key)


def generate_script_with_context(formato, instrucao="", perfil_data=None):
    """
    Gera roteiro usando contexto do C√©rebro
    
    Args:
        formato: Formato do roteiro
        instrucao: Instru√ß√µes espec√≠ficas do usu√°rio
        perfil_data: Dados do perfil (opcional, usa C√©rebro se n√£o fornecido)
    """
    client = get_anthropic_client()
    if not client:
        return None
    
    try:
        # Obt√©m contexto do C√©rebro
        cerebro_context = get_cerebro_context()
        
        # Prompt personalizado com contexto
        prompt = f"""
{cerebro_context}

TAREFA: Gerar roteiro para v√≠deo curto ({formato})

INSTRU√á√ïES ESPEC√çFICAS: {instrucao if instrucao else "Use as informa√ß√µes do perfil para criar conte√∫do relevante"}

FORMATO: {formato}

DIRETRIZES:
1. Use o tom de voz e estilo de comunica√ß√£o do perfil
2. Aborde temas de interesse do usu√°rio
3. Fale diretamente com o p√∫blico-alvo definido
4. Inclua elementos dos diferenciais e experi√™ncias
5. Mantenha dura√ß√£o entre 60-90 segundos
6. Use linguagem adequada √†s plataformas definidas

Gere um roteiro completo e personalizado:
"""
        
        response = client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=2000,
            messages=[{"role": "user", "content": prompt}]
        )
        
        return response.content[0].text
        
    except Exception as e:
        st.error(f"‚ùå Erro na API do Claude: {str(e)}")
        return None


def generate_react_script_real(video_url, description, style, perfil_data=None):
    """
    Gera roteiro React usando processamento REAL de v√≠deo
    
    Args:
        video_url: URL do v√≠deo
        description: Descri√ß√£o/instru√ß√µes do usu√°rio
        style: Estilo do React (Padr√£o ou Bate-Bola)
        perfil_data: Dados do perfil
    """
    client = get_anthropic_client()
    if not client:
        return None
    
    try:
        # 1. PROCESSAR V√çDEO REAL
        st.info("üé• Processando v√≠deo real...")
        video_data = process_video_url(video_url)
        
        if 'error' in video_data:
            st.error(f"‚ùå Erro no processamento: {video_data['error']}")
            return None
        
        # 2. VERIFICAR SE TRANSCRI√á√ÉO FOI OBTIDA
        if not video_data.get('transcription'):
            st.error("‚ùå N√£o foi poss√≠vel obter transcri√ß√£o do v√≠deo")
            return None
        
        # 3. SELECIONAR SEGMENTO ENGAJANTE
        segment = select_engaging_segment(video_data['transcription'], target_words=100)
        
        # 4. OBTER CONTEXTO DO C√âREBRO
        cerebro_context = get_cerebro_context()
        
        # 5. GERAR ROTEIRO COM IA
        if style == "React Padr√£o":
            prompt = f"""
{cerebro_context}

V√çDEO PROCESSADO:
- Plataforma: {video_data['platform']}
- T√≠tulo: {video_data['title']}
- Autor: {video_data['author']}
- Dura√ß√£o: {video_data['duration']}

TRANSCRI√á√ÉO COMPLETA:
{video_data['transcription']}

SEGMENTO SELECIONADO PARA REACT:
{segment}

INSTRU√á√ïES DO USU√ÅRIO: {description}

TAREFA: Criar roteiro React Padr√£o personalizado

ESTRUTURA OBRIGAT√ìRIA:
1. TRECHO DO V√çDEO (30-50s) - Use o segmento selecionado
2. HEADLINE (3-10s) - Crie headline impactante baseada no conte√∫do
3. CONTE√öDO PRINCIPAL (15-30s) - Sua rea√ß√£o/an√°lise personalizada
4. POSICIONAMENTO + CTA (10-20s) - Use informa√ß√µes do seu perfil

DIRETRIZES:
- Use seu tom de voz e estilo de comunica√ß√£o
- Conecte com seu p√∫blico-alvo
- Inclua seus diferenciais e experi√™ncias
- Mantenha autenticidade e relev√¢ncia
- Dura√ß√£o total: 60-90 segundos

Gere o roteiro completo:
"""
        else:  # React Bate-Bola
            prompt = f"""
{cerebro_context}

V√çDEO PROCESSADO:
- Plataforma: {video_data['platform']}
- T√≠tulo: {video_data['title']}
- Autor: {video_data['author']}
- Dura√ß√£o: {video_data['duration']}

TRANSCRI√á√ÉO COMPLETA:
{video_data['transcription']}

SEGMENTO SELECIONADO PARA REACT:
{segment}

INSTRU√á√ïES DO USU√ÅRIO: {description}

TAREFA: Criar roteiro React Bate-Bola personalizado

ESTRUTURA OBRIGAT√ìRIA:
1. HEADLINE (3-5s) - Headline chamativa
2. BATE-BOLA (60-70s):
   - Trecho do v√≠deo
   - SUA REA√á√ÉO imediata
   - Trecho do v√≠deo
   - SUA REA√á√ÉO
   - Continue alternando
3. POSICIONAMENTO + CTA (10-15s)

DIRETRIZES:
- Rea√ß√µes aut√™nticas e espont√¢neas
- Use seu tom de voz natural
- Conecte com experi√™ncias pessoais
- Mantenha energia alta
- Dura√ß√£o total: 75-90 segundos

Gere o roteiro completo:
"""
        
        response = client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=2000,
            messages=[{"role": "user", "content": prompt}]
        )
        
        return {
            'script': response.content[0].text,
            'video_data': video_data,
            'segment_used': segment,
            'style': style
        }
        
    except Exception as e:
        st.error(f"‚ùå Erro ao gerar roteiro React: {str(e)}")
        return None


def analisar_conteudo_com_ia(conteudo, url=""):
    """
    Analisa conte√∫do web usando contexto do C√©rebro
    
    Args:
        conteudo: Conte√∫do extra√≠do da web
        url: URL original
    """
    client = get_anthropic_client()
    if not client:
        return None
    
    try:
        cerebro_context = get_cerebro_context()
        
        prompt = f"""
{cerebro_context}

CONTE√öDO PARA AN√ÅLISE:
URL: {url}
CONTE√öDO: {conteudo[:3000]}...

TAREFA: Analisar este conte√∫do considerando meu perfil e objetivos

AN√ÅLISE SOLICITADA:
1. RELEV√ÇNCIA: Como este conte√∫do se relaciona com minha √°rea de atua√ß√£o?
2. OPORTUNIDADES: Que oportunidades de conte√∫do posso extrair?
3. INSIGHTS: Quais insights s√£o valiosos para meu p√∫blico?
4. TEND√äNCIAS: Que tend√™ncias posso identificar?
5. APLICA√á√ÉO: Como posso aplicar isso em meus conte√∫dos?

FORMATO DE RESPOSTA:
- Seja espec√≠fico e pr√°tico
- Conecte com meus objetivos
- Sugira a√ß√µes concretas
- Use linguagem do meu perfil

Fa√ßa a an√°lise completa:
"""
        
        response = client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=1500,
            messages=[{"role": "user", "content": prompt}]
        )
        
        return response.content[0].text
        
    except Exception as e:
        st.error(f"‚ùå Erro na an√°lise: {str(e)}")
        return None


def gerar_relatorio_consolidado(analises):
    """
    Gera relat√≥rio consolidado usando contexto do C√©rebro
    
    Args:
        analises: Lista de an√°lises individuais
    """
    client = get_anthropic_client()
    if not client:
        return None
    
    try:
        cerebro_context = get_cerebro_context()
        
        analises_texto = "\n\n".join([
            f"AN√ÅLISE {i+1}:\n{analise}" 
            for i, analise in enumerate(analises)
        ])
        
        prompt = f"""
{cerebro_context}

AN√ÅLISES INDIVIDUAIS:
{analises_texto}

TAREFA: Criar relat√≥rio consolidado personalizado

ESTRUTURA DO RELAT√ìRIO:
1. RESUMO EXECUTIVO
2. PRINCIPAIS TEND√äNCIAS IDENTIFICADAS
3. OPORTUNIDADES DE CONTE√öDO
4. RECOMENDA√á√ïES ESTRAT√âGICAS
5. PR√ìXIMOS PASSOS

DIRETRIZES:
- Conecte tudo com meus objetivos
- Seja pr√°tico e acion√°vel
- Use meu tom de voz
- Foque no meu p√∫blico-alvo
- Inclua m√©tricas quando poss√≠vel

Gere o relat√≥rio completo:
"""
        
        response = client.messages.create(
            model="claude-3-5-sonnet-20241022",
            max_tokens=2500,
            messages=[{"role": "user", "content": prompt}]
        )
        
        return response.content[0].text
        
    except Exception as e:
        st.error(f"‚ùå Erro no relat√≥rio: {str(e)}")
        return None

